name: 'Build & Push'
on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
        description: 'Project to setup'
      deploy:
        required: false
        type: boolean
        description: 'Deploy after build'
        default: false
      env:
        required: false
        type: string
        description: 'Environment to build for (testnet/prod)'
        default: 'testnet'
jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
      docker_image_tag: ${{ steps.build.outputs.docker_image_tag }}
    steps:
      - name: 'PR commits + 1'
        run: echo "PR_FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))" >> "${GITHUB_ENV}"
      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ env.PR_FETCH_DEPTH }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.10.0
      - name: 'Setup environment'
        id: 'setup'
        uses: ./.github/workflows/setup
      - name: buildx cache
        id: buildx-cache
        uses: actions/cache@v3
        with:
          path: |
            /tmp/.buildx-cache-${{ inputs.project }}
          key: ${{ runner.os }}-buildx-cache-0-${{ inputs.project }}-${{ hashFiles('pnpm-lock.yaml', '.node-version', 'package.json', 'patches/**') }}
          restore-keys: |
            ${{ runner.os }}-buildx-cache-0-${{ inputs.project }}-
      - name: Build And Push
        id: 'build'
        shell: bash
        env:
          GCR_KEY_FILE: ${{ secrets.GCR_KEY_FILE }}
        run: |
          echo "$GCR_KEY_FILE" | docker login -u _json_key --password-stdin https://us-central1-docker.pkg.dev
          export INPUT_GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          export INPUT_PUSH=true
          export INPUT_LOAD=false
          export INPUT_CACHE_FROM="type=local,src=/tmp/.buildx-cache-${{ inputs.project }}"
          export INPUT_CACHE_TO="type=local,dest=/tmp/.buildx-cache-${{ inputs.project }},mode=max"
          direnv exec . nx run ${{ inputs.project }}:container
          echo docker_image_tag=$(jq -r '."image.name"' .nx-container/${{ inputs.project }}/metadata | sed 's/^.*,//g') >> $GITHUB_OUTPUT
  deploy:
    if: inputs.deploy == true
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: 'Echo Image Tag'
        run: |
          echo ${{ needs.build.outputs.docker_image_tag }}
          echo project ${{ inputs.project }}
          echo deploy: ${{ inputs.deploy }}
          echo environment: ${{ inputs.environment }}
      - uses: actions/checkout@v4
