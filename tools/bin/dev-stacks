#!/usr/bin/env bash
set -euo pipefail
export PROJECT_NAME="dev-stacks"
# shellcheck source=./_dev_utils
source "$NX_WORKSPACE_ROOT"/tools/bin/_dev_utils
echo_welcome


print_usage() {
  echo "Usage: $0 {up|upd|deploy|down|logs|clean|reset|info|sync}"
}

green() { echo -e "\033[32m$@\033[0m"; }

echo_ports() {
  green stacks-postgres: "$(get_host_name):$(read_docker_compose .services.stacks_postgres.ports[0])"
  green stacks-blockchain-api: http://$(get_host_name):"$(read_docker_compose .services.stacks-blockchain-api.ports[0])"
  green stacks-blockchain: "$(read_docker_compose .services.stacks-blockchain.ports[0] | cut -d: -f1)"
  green stacks-blockchain-explorer: http://$(get_host_name):"$(read_docker_compose .services.stacks-blockchain-explorer.ports[0] | cut -d: -f1)"
}

main() {
  # check if command is passed
  if [ -z "${1:-}" ]; then
    print_usage
    exit 1
  fi

  local cmd=$1
  case $cmd in
  sync)
    check_remote_artifact_config
    upload_artifact
    ;;
  up)
    shift
    _docker_compose up -d $@
    echo_ports
    ;;
  _up)
    _docker_compose up
    echo_ports
    ;;
  down)
    _docker_compose down $@
    ;;
  logs)
    _docker_compose logs -f --tail=100
    ;;
  clean)
    _docker_compose down -v -t 0
    ;;
  reset)
    _docker_compose down -v -t 0
    _docker_compose up -d
    echo_ports
    local CHECK_URL=http://$(get_host_name):$(read_docker_compose .services.stacks-blockchain.ports[0] | cut -d: -f1)
    echo -n "Waiting for stacks blockchain node $CHECK_URL "
    for _ in $(seq 1 999); do
      echo -n .
      if curl -so /dev/null "$CHECK_URL"; then
        echo
        echo 'stacks blockchain node started'
        echo 'setup contracts'
        nx run libs-brc20-indexer:setup
        exit 0
      fi
      sleep 0.5
    done
    ;;
  info)
    echo_ports
    ;;
  *)
    print_usage
    exit 1
    ;;
  esac
}

main $@
