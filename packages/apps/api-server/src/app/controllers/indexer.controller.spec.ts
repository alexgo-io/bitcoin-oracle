import { Indexer, MockIndexer } from '@meta-protocols-oracle/api';
import { SQL } from '@meta-protocols-oracle/commons';
import { PersistentService } from '@meta-protocols-oracle/persistent';
import { APIOf, Enums } from '@meta-protocols-oracle/types';
import { INestApplication } from '@nestjs/common';
import { Test, TestingModule } from '@nestjs/testing';
import { randomBytes } from 'node:crypto';
import request from 'supertest';
import { AppModule } from '../app.module';
import { AllExceptionsFilter } from '../interceptors/all-exceptions.filter';

describe('Indexer Controller (e2e)', () => {
  let app: INestApplication;
  let indexer: Indexer;

  beforeEach(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [AppModule],
    }).compile();

    app = moduleFixture.createNestApplication();
    app.useGlobalFilters(new AllExceptionsFilter());
    await app.init();
    const persistent = moduleFixture.get(PersistentService);
    await persistent.pgPool.query(
      SQL.typeAlias('void')`truncate table indexer.txs cascade`,
    );

    indexer = moduleFixture.get(Indexer);
  });

  it('/api/v1/indexer/txs (POST)', () => {
    const defaultIndexer = indexer as unknown as MockIndexer;
    jest
      .spyOn(defaultIndexer, 'validateOrderHash')
      .mockImplementation(() => Promise.resolve());

    const data: APIOf<'txs', 'request', 'json'> = {
      type: 'bis',
      header: '0x01',
      height: '1001',
      tx_hash:


      proof_hashes: [randomBytes(32).toString('hex')],
      tx_index: '0',
      tree_depth: '1',
      from: '0x512028E75B62798B632D1F214E13586B3B91D0F0BE9C84D2E9F4868EB1DBCE66C3DE',
      to: '0x00145724F67BF087DCF5D402D83C7FCF97BB512C8EC8',
      output: '1',
      tick: 'sat',
      decimals: '18',
      amt: '100000',
      from_bal: '100000',
      satpoint: '3',
      to_bal: '100000',
      order_hash: randomBytes(32).toString('hex'),
      signature: randomBytes(64).toString('hex'),
      signer: randomBytes(20).toString('hex'),
      signer_pubkey: randomBytes(33).toString('hex'),
    };
    return request(app.getHttpServer())
      .post('/api/v1/indexer/txs')
      .set('authorization', `Bearer 00000000-0000-0000-0000-000000000001`)
      .set('x-service-type', Enums.ServiceType.enum.VALIDATOR)
      .set('x-version', '0.0.1')
      .send(data)
      .expect(201)
      .expect({ message: 'ok' });
  });
});
